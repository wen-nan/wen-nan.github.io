<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>NarcissusBlog</title>
        <link>http://wen-nan.github.io/</link>
        <description>NarcissusBlog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 13 Feb 2022 00:00:00 &#43;0000</lastBuildDate>
            <atom:link href="http://wen-nan.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Golang源码之协程调度</title>
    <link>http://wen-nan.github.io/posts/golang%E6%BA%90%E7%A0%81_%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6/</link>
    <pubDate>Sun, 13 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/golang%E6%BA%90%E7%A0%81_%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6/</guid>
    <description><![CDATA[协程]]></description>
</item><item>
    <title>Golang源码之常见控制结构实现原理</title>
    <link>http://wen-nan.github.io/posts/golang%E6%BA%90%E7%A0%81_%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</link>
    <pubDate>Sun, 13 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/golang%E6%BA%90%E7%A0%81_%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</guid>
    <description><![CDATA[Defer 1. 前言 defer语句用于延迟函数的调用，每次defer都会把一个函数压入栈中，函数返回前再把延迟的函数取出并执行。 2. defer规则 2.1 规则一]]></description>
</item><item>
    <title>计算机网络</title>
    <link>http://wen-nan.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
    <pubDate>Sun, 13 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid>
    <description><![CDATA[1. OSI与TCP/IP各层的结构与功能，都有哪些协议? 学习计算机网络时一般采用折中的办法，即中和OSI和TCP/IP的优点，采用一种只有五层]]></description>
</item><item>
    <title>图论</title>
    <link>http://wen-nan.github.io/posts/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E5%9B%BE%E8%AE%BA/</link>
    <pubDate>Mon, 20 Dec 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E5%9B%BE%E8%AE%BA/</guid>
    <description><![CDATA[图论基础 1. 图的逻辑结构和具体实现 一幅图是由节点和边构成的，逻辑结构如下： 实现上，通常用邻接表和邻接矩阵来实现。 邻接表很直观，就是每个节点x的]]></description>
</item><item>
    <title>终端设置代理</title>
    <link>http://wen-nan.github.io/posts/%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</link>
    <pubDate>Sun, 19 Dec 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</guid>
    <description><![CDATA[临时设置 直接在终端输入如下命令 export https_proxy=http://proxyAddress:port http_proxy=http://proxyAddress:port all_proxy=socks5://proxyAddress:port export命令用于设置或显示环境变量，语法是export [-fnp] [变量名称]=[变量设置值] -f 代表[变量名]]></description>
</item><item>
    <title>Golang实现分布式缓存</title>
    <link>http://wen-nan.github.io/posts/golang%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98%E5%AE%9E%E7%8E%B0/</link>
    <pubDate>Fri, 10 Dec 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/golang%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98%E5%AE%9E%E7%8E%B0/</guid>
    <description><![CDATA[概述 1. 实现的特性 单机缓存和基于HTTP的分布式缓存 使用最近最少访问（LRU）缓存策略 使用Go锁机制防止缓存穿透 使用一致性哈希选择节点，实现负]]></description>
</item><item>
    <title>Shell脚本学习</title>
    <link>http://wen-nan.github.io/posts/shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A01/</link>
    <pubDate>Mon, 06 Dec 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A01/</guid>
    <description><![CDATA[Bash基本语法 1. echo命令 echo命令作用是在屏幕输出一行文本。如果想要输出多行文本，即包括换行符，需要把多行文本放在引号里面。 1.1 -n参]]></description>
</item><item>
    <title>刷题技巧总结</title>
    <link>http://wen-nan.github.io/posts/%E5%88%B7%E9%A2%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</link>
    <pubDate>Mon, 06 Dec 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/%E5%88%B7%E9%A2%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[位掩码技巧 原理讲解 用于快速判断是否有重复出现的字符。限制条件为必须均为小写字母构成(不是必须)，则可以使用位掩码技巧：用一个(长度为26比特]]></description>
</item><item>
    <title>Golang源码之常见数据结构实现原理下</title>
    <link>http://wen-nan.github.io/posts/golang%E6%BA%90%E7%A0%81_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%862/</link>
    <pubDate>Wed, 01 Dec 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/golang%E6%BA%90%E7%A0%81_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%862/</guid>
    <description><![CDATA[Struct的Tag 1. 前言 Go的struct声明允许字段附带Tag来对字段做一些标记。该Tag不仅仅是一个字符串，写法也需要遵循一定的规则。]]></description>
</item><item>
    <title>Golang源码之常见数据结构实现原理上</title>
    <link>http://wen-nan.github.io/posts/golang%E6%BA%90%E7%A0%81_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%861/</link>
    <pubDate>Tue, 30 Nov 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/golang%E6%BA%90%E7%A0%81_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%861/</guid>
    <description><![CDATA[Channel 1. 前言 channel是Golang提供的goroutine间通信方式，主要用于进程内各goroutine间通信。源代码位于runtime/]]></description>
</item></channel>
</rss>
