<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>NarcissusBlog</title>
        <link>http://wen-nan.github.io/</link>
        <description>NarcissusBlog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 24 Feb 2022 00:00:00 &#43;0000</lastBuildDate>
            <atom:link href="http://wen-nan.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Golang面试题</title>
    <link>http://wen-nan.github.io/posts/golang%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
    <pubDate>Thu, 24 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/golang%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
    <description><![CDATA[1、nil切片和空切片 问题 nil切片和空切片指向的地址一样吗？代码会输出什么？ 回答 nil切片和空切片指向的地址不一样。nil空切片引用数组指]]></description>
</item><item>
    <title>缓存穿透与缓存雪崩</title>
    <link>http://wen-nan.github.io/posts/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/</link>
    <pubDate>Thu, 24 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/</guid>
    <description><![CDATA[缓存穿透 缓存穿透就是大量请求的key根本不存在于缓存中，导致请求直接到了数据库上，根本没有经过缓存这一层。流程如下： 有哪些解决办法？ 缓存无效]]></description>
</item><item>
    <title>计算机网络</title>
    <link>http://wen-nan.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
    <pubDate>Thu, 24 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid>
    <description><![CDATA[1. OSI与TCP/IP各层的结构与功能，都有哪些协议? 学习计算机网络时一般采用折中的办法，即中和OSI和TCP/IP的优点，采用一种只有五层]]></description>
</item><item>
    <title>MySQL面试题</title>
    <link>http://wen-nan.github.io/posts/mysql%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
    <pubDate>Wed, 23 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/mysql%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
    <description><![CDATA[1. MyISAM与InnoDB的区别 在MySQL5.5之前，默认存储引擎是MyISAM，5.5版本之后，默认存储引擎变为了InnoDB。下面对]]></description>
</item><item>
    <title>Redis相关面试题</title>
    <link>http://wen-nan.github.io/posts/redis%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
    <pubDate>Wed, 23 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/redis%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
    <description><![CDATA[1. Redis简介 Redis就是一个使用C语言开发的数据库，与传统数据库不同的是，Redis数据是存在内存中的，即他是内存数据库，读写速度非常]]></description>
</item><item>
    <title>Golang源码之内存管理</title>
    <link>http://wen-nan.github.io/posts/golang%E6%BA%90%E7%A0%81_%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
    <pubDate>Tue, 22 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/golang%E6%BA%90%E7%A0%81_%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
    <description><![CDATA[1. Go V1.3之前的标记-清除(mark and sweep)算法 该算法主要有两个步骤： 标记 清除 第一步先暂停程序业务逻辑，分类出可达和不可达对象，然后]]></description>
</item><item>
    <title>操作系统</title>
    <link>http://wen-nan.github.io/posts/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
    <pubDate>Mon, 21 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid>
    <description><![CDATA[1. 操作系统基础 1.1 什么是操作系统？ 操作系统是管理计算机硬件与软件资源的程序，是计算机的基石。 操作系统本质上是一个运行在计算机上的程序，用于管理]]></description>
</item><item>
    <title>零拷贝</title>
    <link>http://wen-nan.github.io/posts/%E9%9B%B6%E6%8B%B7%E8%B4%9D/</link>
    <pubDate>Mon, 21 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/%E9%9B%B6%E6%8B%B7%E8%B4%9D/</guid>
    <description><![CDATA[以文件传输作为切入点，分析零拷贝原理。 1. 为什么要有DMA技术？ 在没有DMA技术前，I/O过程如下： CPU发出对应指令给磁盘控制器，然后返回；]]></description>
</item><item>
    <title>Golang源码之协程调度</title>
    <link>http://wen-nan.github.io/posts/golang%E6%BA%90%E7%A0%81_%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6/</link>
    <pubDate>Mon, 14 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/golang%E6%BA%90%E7%A0%81_%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6/</guid>
    <description><![CDATA[1. Golang调度器的由来 1.1 单进程时代 早期的操作系统是单进程的，面临单一的执行流程，进程阻塞会带来CPU时间浪费的缺陷。 1.2 多进程时代有了调度]]></description>
</item><item>
    <title>Golang源码之常见控制结构实现原理</title>
    <link>http://wen-nan.github.io/posts/golang%E6%BA%90%E7%A0%81_%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</link>
    <pubDate>Sun, 13 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/golang%E6%BA%90%E7%A0%81_%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</guid>
    <description><![CDATA[Defer 1. 前言 defer语句用于延迟函数的调用，每次defer都会把一个函数压入栈中，函数返回前再把延迟的函数取出并执行。 2. defer规则 2.1 规则一]]></description>
</item></channel>
</rss>
