<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>NarcissusBlog</title>
        <link>http://wen-nan.github.io/</link>
        <description>NarcissusBlog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 04 Sep 2021 00:00:00 &#43;0000</lastBuildDate>
            <atom:link href="http://wen-nan.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>二分查找</title>
    <link>http://wen-nan.github.io/posts/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
    <pubDate>Sat, 04 Sep 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
    <description><![CDATA[注意：排序数组中的搜索问题，首先想到二分法。 一、基本的二分查找 最简单的情况就是搜索一个数，如果存在，返回索引；否则返回-1。 func search(nums []int, target int) int { //]]></description>
</item><item>
    <title>Git基础使用</title>
    <link>http://wen-nan.github.io/posts/git%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</link>
    <pubDate>Fri, 03 Sep 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/git%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</guid>
    <description><![CDATA[一、Git简介 Git是分布式版本控制系统。 集中式VS分布式 集中式版本控制系统，版本库集中存放在中央服务器，干活的时候先从中央服务器获取最新版]]></description>
</item><item>
    <title>Golang基础语法细节</title>
    <link>http://wen-nan.github.io/posts/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E7%BB%86%E8%8A%82/</link>
    <pubDate>Fri, 03 Sep 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E7%BB%86%E8%8A%82/</guid>
    <description><![CDATA[一、类型 简短模式(x := 100)定义限制: 定义变量，同时显示初始化。 不能提供数据类型。 只能用在函数内部。 简短模式有可能会出现退化的赋值操作。例]]></description>
</item><item>
    <title>Golang实现博客(一)</title>
    <link>http://wen-nan.github.io/posts/golang%E5%AE%9E%E7%8E%B0%E5%8D%9A%E5%AE%A2%E4%B8%80/</link>
    <pubDate>Fri, 03 Sep 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/golang%E5%AE%9E%E7%8E%B0%E5%8D%9A%E5%AE%A2%E4%B8%80/</guid>
    <description><![CDATA[基础准备 1、热加载 air是Go语言的热加载工具，它可以监听文件或目录的变化，自动编译，重启程序。大大提高开发期的工作效率。 安装使用air工具]]></description>
</item><item>
    <title>Golang操作sql总结</title>
    <link>http://wen-nan.github.io/posts/sql%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</link>
    <pubDate>Fri, 03 Sep 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/sql%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[总结Go标准库里sql包的使用方法。]]></description>
</item><item>
    <title>Golang面试题</title>
    <link>http://wen-nan.github.io/posts/golang%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
    <pubDate>Fri, 03 Sep 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/golang%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
    <description><![CDATA[1、nil切片和空切片 问题 nil切片和空切片指向的地址一样吗？代码会输出什么？ 回答 nil切片和空切片指向的地址不一样。nil空切片引用数组指]]></description>
</item><item>
    <title>栈和队列</title>
    <link>http://wen-nan.github.io/posts/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</link>
    <pubDate>Fri, 03 Sep 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</guid>
    <description><![CDATA[队列是一种先进先出的数据结构，栈是一种先进后出的数据结构。这两种数据结构底层都是数组或者链表实现的，只是API限定了它们的特性。 栈实现队列 队]]></description>
</item><item>
    <title>链表</title>
    <link>http://wen-nan.github.io/posts/%E9%93%BE%E8%A1%A8/</link>
    <pubDate>Fri, 03 Sep 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://wen-nan.github.io/posts/%E9%93%BE%E8%A1%A8/</guid>
    <description><![CDATA[反转链表 考虑先用递归实现。迭代思路虽然简单，但细节问题很多。 递归反转整个链表 代码如下： 对于递归算法，最重要的是明确递归函数的定义。rever]]></description>
</item></channel>
</rss>
